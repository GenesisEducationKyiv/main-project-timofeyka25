// Code generated by MockGen. DO NOT EDIT.
// Source: genesis-test/src/app/application (interfaces: NewsletterSender,EmailStorage,ExchangeProvider,ExchangeLogger)

// Package mock_service is a generated GoMock package.
package mocks

import (
	"genesis-test/src/app/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

type ExchangeProvider interface {
	GetCurrencyRate(pair *model.CurrencyPair) (*model.CurrencyRate, error)
}

// MockNewsletterSender is a mock of NewsletterSender interface.
type MockNewsletterSender struct {
	ctrl     *gomock.Controller
	recorder *MockNewsletterSenderMockRecorder
}

// MockNewsletterSenderMockRecorder is the mock recorder for MockNewsletterSender.
type MockNewsletterSenderMockRecorder struct {
	mock *MockNewsletterSender
}

// NewMockNewsletterSender creates a new mock instance.
func NewMockNewsletterSender(ctrl *gomock.Controller) *MockNewsletterSender {
	mock := &MockNewsletterSender{ctrl: ctrl}
	mock.recorder = &MockNewsletterSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsletterSender) EXPECT() *MockNewsletterSenderMockRecorder {
	return m.recorder
}

// MultipleSending mocks base method.
func (m *MockNewsletterSender) MultipleSending(arg0 []string, arg1 *model.EmailMessage) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleSending", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleSending indicates an expected call of MultipleSending.
func (mr *MockNewsletterSenderMockRecorder) MultipleSending(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleSending", reflect.TypeOf((*MockNewsletterSender)(nil).MultipleSending), arg0, arg1)
}

// MockEmailStorage is a mock of EmailStorage interface.
type MockEmailStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEmailStorageMockRecorder
}

// MockEmailStorageMockRecorder is the mock recorder for MockEmailStorage.
type MockEmailStorageMockRecorder struct {
	mock *MockEmailStorage
}

// NewMockEmailStorage creates a new mock instance.
func NewMockEmailStorage(ctrl *gomock.Controller) *MockEmailStorage {
	mock := &MockEmailStorage{ctrl: ctrl}
	mock.recorder = &MockEmailStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailStorage) EXPECT() *MockEmailStorageMockRecorder {
	return m.recorder
}

// AddEmail mocks base method.
func (m *MockEmailStorage) AddEmail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEmail indicates an expected call of AddEmail.
func (mr *MockEmailStorageMockRecorder) AddEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockEmailStorage)(nil).AddEmail), arg0)
}

// GetAllEmails mocks base method.
func (m *MockEmailStorage) GetAllEmails() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmails")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmails indicates an expected call of GetAllEmails.
func (mr *MockEmailStorageMockRecorder) GetAllEmails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmails", reflect.TypeOf((*MockEmailStorage)(nil).GetAllEmails))
}

// MockExchangeProvider is a mock of ExchangeProvider interface.
type MockExchangeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeProviderMockRecorder
}

// MockExchangeProviderMockRecorder is the mock recorder for MockExchangeProvider.
type MockExchangeProviderMockRecorder struct {
	mock *MockExchangeProvider
}

// NewMockExchangeProvider creates a new mock instance.
func NewMockExchangeProvider(ctrl *gomock.Controller) *MockExchangeProvider {
	mock := &MockExchangeProvider{ctrl: ctrl}
	mock.recorder = &MockExchangeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeProvider) EXPECT() *MockExchangeProviderMockRecorder {
	return m.recorder
}

// GetCurrencyRate mocks base method.
func (m *MockExchangeProvider) GetCurrencyRate(arg0 *model.CurrencyPair) (*model.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate", arg0)
	ret0, _ := ret[0].(*model.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockExchangeProviderMockRecorder) GetCurrencyRate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockExchangeProvider)(nil).GetCurrencyRate), arg0)
}

// SetNext mocks base method.
func (m *MockExchangeProvider) SetNext(arg0 ExchangeProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", arg0)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockExchangeProviderMockRecorder) SetNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockExchangeProvider)(nil).SetNext), arg0)
}

// MockExchangeLogger is a mock of ExchangeLogger interface.
type MockExchangeLogger struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeLoggerMockRecorder
}

// MockExchangeLoggerMockRecorder is the mock recorder for MockExchangeLogger.
type MockExchangeLoggerMockRecorder struct {
	mock *MockExchangeLogger
}

// NewMockExchangeLogger creates a new mock instance.
func NewMockExchangeLogger(ctrl *gomock.Controller) *MockExchangeLogger {
	mock := &MockExchangeLogger{ctrl: ctrl}
	mock.recorder = &MockExchangeLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeLogger) EXPECT() *MockExchangeLoggerMockRecorder {
	return m.recorder
}

// LogExchangeRate mocks base method.
func (m *MockExchangeLogger) LogExchangeRate(arg0 string, arg1 *model.CurrencyRate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogExchangeRate", arg0, arg1)
}

// LogExchangeRate indicates an expected call of LogExchangeRate.
func (mr *MockExchangeLoggerMockRecorder) LogExchangeRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogExchangeRate", reflect.TypeOf((*MockExchangeLogger)(nil).LogExchangeRate), arg0, arg1)
}
