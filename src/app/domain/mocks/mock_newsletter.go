// Code generated by MockGen. DO NOT EDIT.
// Source: genesis-test/src/app/domain (interfaces: NewsletterRepository,NewsletterService)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "genesis-test/src/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNewsletterRepository is a mock of NewsletterRepository interface.
type MockNewsletterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsletterRepositoryMockRecorder
}

// MockNewsletterRepositoryMockRecorder is the mock recorder for MockNewsletterRepository.
type MockNewsletterRepositoryMockRecorder struct {
	mock *MockNewsletterRepository
}

// NewMockNewsletterRepository creates a new mock instance.
func NewMockNewsletterRepository(ctrl *gomock.Controller) *MockNewsletterRepository {
	mock := &MockNewsletterRepository{ctrl: ctrl}
	mock.recorder = &MockNewsletterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsletterRepository) EXPECT() *MockNewsletterRepositoryMockRecorder {
	return m.recorder
}

// AddNewEmail mocks base method.
func (m *MockNewsletterRepository) AddNewEmail(arg0 []string, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewEmail indicates an expected call of AddNewEmail.
func (mr *MockNewsletterRepositoryMockRecorder) AddNewEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewEmail", reflect.TypeOf((*MockNewsletterRepository)(nil).AddNewEmail), arg0, arg1)
}

// GetSubscribedEmails mocks base method.
func (m *MockNewsletterRepository) GetSubscribedEmails() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribedEmails")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribedEmails indicates an expected call of GetSubscribedEmails.
func (mr *MockNewsletterRepositoryMockRecorder) GetSubscribedEmails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribedEmails", reflect.TypeOf((*MockNewsletterRepository)(nil).GetSubscribedEmails))
}

// SendEmail mocks base method.
func (m *MockNewsletterRepository) SendEmail(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockNewsletterRepositoryMockRecorder) SendEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockNewsletterRepository)(nil).SendEmail), arg0, arg1)
}

// SendToSubscribedEmails mocks base method.
func (m *MockNewsletterRepository) SendToSubscribedEmails(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToSubscribedEmails", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToSubscribedEmails indicates an expected call of SendToSubscribedEmails.
func (mr *MockNewsletterRepositoryMockRecorder) SendToSubscribedEmails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToSubscribedEmails", reflect.TypeOf((*MockNewsletterRepository)(nil).SendToSubscribedEmails), arg0)
}

// MockNewsletterService is a mock of NewsletterService interface.
type MockNewsletterService struct {
	ctrl     *gomock.Controller
	recorder *MockNewsletterServiceMockRecorder
}

// MockNewsletterServiceMockRecorder is the mock recorder for MockNewsletterService.
type MockNewsletterServiceMockRecorder struct {
	mock *MockNewsletterService
}

// NewMockNewsletterService creates a new mock instance.
func NewMockNewsletterService(ctrl *gomock.Controller) *MockNewsletterService {
	mock := &MockNewsletterService{ctrl: ctrl}
	mock.recorder = &MockNewsletterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsletterService) EXPECT() *MockNewsletterServiceMockRecorder {
	return m.recorder
}

// SendEmails mocks base method.
func (m *MockNewsletterService) SendEmails() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmails")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmails indicates an expected call of SendEmails.
func (mr *MockNewsletterServiceMockRecorder) SendEmails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmails", reflect.TypeOf((*MockNewsletterService)(nil).SendEmails))
}

// Subscribe mocks base method.
func (m *MockNewsletterService) Subscribe(arg0 *domain.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNewsletterServiceMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNewsletterService)(nil).Subscribe), arg0)
}
