// Code generated by MockGen. DO NOT EDIT.
// Source: genesis-test/src/app/service (interfaces: NewsletterRepository,EmailStorage,ExchangeChain,ExchangeLogger)

// Package mock_service is a generated GoMock package.
package mocks

import (
	domain "genesis-test/src/app/domain"
	service "genesis-test/src/app/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNewsletterRepository is a mock of NewsletterRepository interface.
type MockNewsletterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsletterRepositoryMockRecorder
}

// MockNewsletterRepositoryMockRecorder is the mock recorder for MockNewsletterRepository.
type MockNewsletterRepositoryMockRecorder struct {
	mock *MockNewsletterRepository
}

// NewMockNewsletterRepository creates a new mock instance.
func NewMockNewsletterRepository(ctrl *gomock.Controller) *MockNewsletterRepository {
	mock := &MockNewsletterRepository{ctrl: ctrl}
	mock.recorder = &MockNewsletterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsletterRepository) EXPECT() *MockNewsletterRepositoryMockRecorder {
	return m.recorder
}

// MultipleSending mocks base method.
func (m *MockNewsletterRepository) MultipleSending(arg0 []string, arg1 *domain.EmailMessage) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleSending", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleSending indicates an expected call of MultipleSending.
func (mr *MockNewsletterRepositoryMockRecorder) MultipleSending(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleSending", reflect.TypeOf((*MockNewsletterRepository)(nil).MultipleSending), arg0, arg1)
}

// MockEmailStorage is a mock of EmailStorage interface.
type MockEmailStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEmailStorageMockRecorder
}

// MockEmailStorageMockRecorder is the mock recorder for MockEmailStorage.
type MockEmailStorageMockRecorder struct {
	mock *MockEmailStorage
}

// NewMockEmailStorage creates a new mock instance.
func NewMockEmailStorage(ctrl *gomock.Controller) *MockEmailStorage {
	mock := &MockEmailStorage{ctrl: ctrl}
	mock.recorder = &MockEmailStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailStorage) EXPECT() *MockEmailStorageMockRecorder {
	return m.recorder
}

// AddEmail mocks base method.
func (m *MockEmailStorage) AddEmail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEmail indicates an expected call of AddEmail.
func (mr *MockEmailStorageMockRecorder) AddEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockEmailStorage)(nil).AddEmail), arg0)
}

// GetAllEmails mocks base method.
func (m *MockEmailStorage) GetAllEmails() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmails")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmails indicates an expected call of GetAllEmails.
func (mr *MockEmailStorageMockRecorder) GetAllEmails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmails", reflect.TypeOf((*MockEmailStorage)(nil).GetAllEmails))
}

// MockExchangeChain is a mock of ExchangeChain interface.
type MockExchangeChain struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeChainMockRecorder
}

// MockExchangeChainMockRecorder is the mock recorder for MockExchangeChain.
type MockExchangeChainMockRecorder struct {
	mock *MockExchangeChain
}

// NewMockExchangeChain creates a new mock instance.
func NewMockExchangeChain(ctrl *gomock.Controller) *MockExchangeChain {
	mock := &MockExchangeChain{ctrl: ctrl}
	mock.recorder = &MockExchangeChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeChain) EXPECT() *MockExchangeChainMockRecorder {
	return m.recorder
}

// GetCurrencyRate mocks base method.
func (m *MockExchangeChain) GetCurrencyRate(arg0 *domain.CurrencyPair) (*domain.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate", arg0)
	ret0, _ := ret[0].(*domain.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockExchangeChainMockRecorder) GetCurrencyRate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockExchangeChain)(nil).GetCurrencyRate), arg0)
}

// SetNext mocks base method.
func (m *MockExchangeChain) SetNext(arg0 service.ExchangeChain) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", arg0)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockExchangeChainMockRecorder) SetNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockExchangeChain)(nil).SetNext), arg0)
}

// MockExchangeLogger is a mock of ExchangeLogger interface.
type MockExchangeLogger struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeLoggerMockRecorder
}

// MockExchangeLoggerMockRecorder is the mock recorder for MockExchangeLogger.
type MockExchangeLoggerMockRecorder struct {
	mock *MockExchangeLogger
}

// NewMockExchangeLogger creates a new mock instance.
func NewMockExchangeLogger(ctrl *gomock.Controller) *MockExchangeLogger {
	mock := &MockExchangeLogger{ctrl: ctrl}
	mock.recorder = &MockExchangeLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeLogger) EXPECT() *MockExchangeLoggerMockRecorder {
	return m.recorder
}

// LogExchangeRate mocks base method.
func (m *MockExchangeLogger) LogExchangeRate(arg0 string, arg1 *domain.CurrencyRate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogExchangeRate", arg0, arg1)
}

// LogExchangeRate indicates an expected call of LogExchangeRate.
func (mr *MockExchangeLoggerMockRecorder) LogExchangeRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogExchangeRate", reflect.TypeOf((*MockExchangeLogger)(nil).LogExchangeRate), arg0, arg1)
}
