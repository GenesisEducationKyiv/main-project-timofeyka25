// Code generated by MockGen. DO NOT EDIT.
// Source: genesis-test/src/app/service (interfaces: NewsletterRepository,EmailStorage,ExchangeRepository)

// Package mock_service is a generated GoMock package.
package mocks

import (
	domain "genesis-test/src/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNewsletterRepository is a mock of NewsletterRepository interface.
type MockNewsletterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsletterRepositoryMockRecorder
}

// MockNewsletterRepositoryMockRecorder is the mock recorder for MockNewsletterRepository.
type MockNewsletterRepositoryMockRecorder struct {
	mock *MockNewsletterRepository
}

// NewMockNewsletterRepository creates a new mock instance.
func NewMockNewsletterRepository(ctrl *gomock.Controller) *MockNewsletterRepository {
	mock := &MockNewsletterRepository{ctrl: ctrl}
	mock.recorder = &MockNewsletterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsletterRepository) EXPECT() *MockNewsletterRepositoryMockRecorder {
	return m.recorder
}

// MultipleSending mocks base method.
func (m *MockNewsletterRepository) MultipleSending(arg0 []string, arg1 *domain.EmailMessage) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleSending", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleSending indicates an expected call of MultipleSending.
func (mr *MockNewsletterRepositoryMockRecorder) MultipleSending(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleSending", reflect.TypeOf((*MockNewsletterRepository)(nil).MultipleSending), arg0, arg1)
}

// MockEmailStorage is a mock of EmailStorage interface.
type MockEmailStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEmailStorageMockRecorder
}

// MockEmailStorageMockRecorder is the mock recorder for MockEmailStorage.
type MockEmailStorageMockRecorder struct {
	mock *MockEmailStorage
}

// NewMockEmailStorage creates a new mock instance.
func NewMockEmailStorage(ctrl *gomock.Controller) *MockEmailStorage {
	mock := &MockEmailStorage{ctrl: ctrl}
	mock.recorder = &MockEmailStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailStorage) EXPECT() *MockEmailStorageMockRecorder {
	return m.recorder
}

// AddEmail mocks base method.
func (m *MockEmailStorage) AddEmail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEmail indicates an expected call of AddEmail.
func (mr *MockEmailStorageMockRecorder) AddEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockEmailStorage)(nil).AddEmail), arg0)
}

// GetAllEmails mocks base method.
func (m *MockEmailStorage) GetAllEmails() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmails")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmails indicates an expected call of GetAllEmails.
func (mr *MockEmailStorageMockRecorder) GetAllEmails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmails", reflect.TypeOf((*MockEmailStorage)(nil).GetAllEmails))
}

// MockExchangeRepository is a mock of ExchangeRepository interface.
type MockExchangeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRepositoryMockRecorder
}

// MockExchangeRepositoryMockRecorder is the mock recorder for MockExchangeRepository.
type MockExchangeRepositoryMockRecorder struct {
	mock *MockExchangeRepository
}

// NewMockExchangeRepository creates a new mock instance.
func NewMockExchangeRepository(ctrl *gomock.Controller) *MockExchangeRepository {
	mock := &MockExchangeRepository{ctrl: ctrl}
	mock.recorder = &MockExchangeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRepository) EXPECT() *MockExchangeRepositoryMockRecorder {
	return m.recorder
}

// GetCurrencyRate mocks base method.
func (m *MockExchangeRepository) GetCurrencyRate(arg0 *domain.CurrencyPair) (*domain.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate", arg0)
	ret0, _ := ret[0].(*domain.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockExchangeRepositoryMockRecorder) GetCurrencyRate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockExchangeRepository)(nil).GetCurrencyRate), arg0)
}
