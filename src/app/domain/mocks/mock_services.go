// Code generated by MockGen. DO NOT EDIT.
// Source: genesis-test/src/app/handler (interfaces: ExchangeService,NewsletterService,SubscriptionService)

// Package mock_handler is a generated GoMock package.
package mocks

import (
	domain "genesis-test/src/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExchangeService is a mock of ExchangeService interface.
type MockExchangeService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceMockRecorder
}

// MockExchangeServiceMockRecorder is the mock recorder for MockExchangeService.
type MockExchangeServiceMockRecorder struct {
	mock *MockExchangeService
}

// NewMockExchangeService creates a new mock instance.
func NewMockExchangeService(ctrl *gomock.Controller) *MockExchangeService {
	mock := &MockExchangeService{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeService) EXPECT() *MockExchangeServiceMockRecorder {
	return m.recorder
}

// GetCurrencyRate mocks base method.
func (m *MockExchangeService) GetCurrencyRate() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockExchangeServiceMockRecorder) GetCurrencyRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockExchangeService)(nil).GetCurrencyRate))
}

// MockNewsletterService is a mock of NewsletterService interface.
type MockNewsletterService struct {
	ctrl     *gomock.Controller
	recorder *MockNewsletterServiceMockRecorder
}

// MockNewsletterServiceMockRecorder is the mock recorder for MockNewsletterService.
type MockNewsletterServiceMockRecorder struct {
	mock *MockNewsletterService
}

// NewMockNewsletterService creates a new mock instance.
func NewMockNewsletterService(ctrl *gomock.Controller) *MockNewsletterService {
	mock := &MockNewsletterService{ctrl: ctrl}
	mock.recorder = &MockNewsletterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsletterService) EXPECT() *MockNewsletterServiceMockRecorder {
	return m.recorder
}

// SendCurrencyRate mocks base method.
func (m *MockNewsletterService) SendCurrencyRate() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCurrencyRate")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCurrencyRate indicates an expected call of SendCurrencyRate.
func (mr *MockNewsletterServiceMockRecorder) SendCurrencyRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCurrencyRate", reflect.TypeOf((*MockNewsletterService)(nil).SendCurrencyRate))
}

// MockSubscriptionService is a mock of SubscriptionService interface.
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService.
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance.
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubscriptionService) Subscribe(arg0 *domain.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionServiceMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionService)(nil).Subscribe), arg0)
}
